import cv2
import os
import sys
import tkinter as tk
from tkinter import Button, Label, Entry, messagebox
from tkinter import ttk
from PIL import Image, ImageTk
from datetime import datetime
import threading
import time

default_folder_to_save = "C:\\PhotoBook"

def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä
def find_available_cameras():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
    available_cameras = []
    print("–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä...")
    
    for i in range(10):
        cap = cv2.VideoCapture(i)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret and frame is not None:
                available_cameras.append(i)
                print(f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞–º–µ—Ä–∞ {i}")
            cap.release()
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {len(available_cameras)}")
    return available_cameras

class DualCameraApp:
    def __init__(self):
        self.cam1 = None
        self.cam2 = None
        self.captured_frame1 = None
        self.captured_frame2 = None
        self.is_running = False
        self.update_thread = None
        
        # –ë–û–õ–¨–®–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        self.video_size = 640  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 480 –¥–æ 640 –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.window = tk.Tk()
        self.window.title("–î–≤–æ–π–Ω–∞—è –≤–µ–±-–∫–∞–º–µ—Ä–∞")
        try:
            icon_image = resource_path("icon.ico")
            self.window.iconbitmap(icon_image)
        except:
            pass
        
        self.setup_ui()
        self.setup_cameras()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = tk.Frame(self.window)
        info_frame.pack(pady=5)
        
        info_label = tk.Label(info_frame, text="–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –¥–≤—É—Ö –∫–∞–º–µ—Ä", 
                             font=("Arial", 14, "bold"))
        info_label.pack()
        
        # –ì–õ–ê–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨: –∫–∞–º–µ—Ä—ã + –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        main_control_frame = tk.Frame(self.window)
        main_control_frame.pack(pady=10)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –≤—ã–±–æ—Ä –∫–∞–º–µ—Ä
        cameras_frame = tk.Frame(main_control_frame)
        cameras_frame.pack(side='left', padx=10)
        
        # –ü–µ—Ä–≤–∞—è –∫–∞–º–µ—Ä–∞
        cam1_frame = tk.Frame(cameras_frame, relief="ridge", bd=2)
        cam1_frame.pack(side='left', padx=10, pady=5)
        
        tk.Label(cam1_frame, text="–ö–∞–º–µ—Ä–∞ 1", font=("Arial", 12, "bold")).pack(pady=3)
        
        self.camera1_var = tk.StringVar()
        self.camera1_combo = ttk.Combobox(cam1_frame, textvariable=self.camera1_var, 
                                         state="readonly", width=15, font=("Arial", 10))
        self.camera1_combo.pack(pady=3)
        
        self.switch1_button = tk.Button(cam1_frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å", 
                                       command=self.switch_camera1, 
                                       relief="raised", bg="#90EE90", 
                                       font=("Arial", 9), width=12)
        self.switch1_button.pack(pady=3)
        
        # –°—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã
        self.status1_label = tk.Label(cam1_frame, text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", 
                                     fg="red", font=("Arial", 8))
        self.status1_label.pack()
        
        # –í—Ç–æ—Ä–∞—è –∫–∞–º–µ—Ä–∞
        cam2_frame = tk.Frame(cameras_frame, relief="ridge", bd=2)
        cam2_frame.pack(side='left', padx=10, pady=5)
        
        tk.Label(cam2_frame, text="–ö–∞–º–µ—Ä–∞ 2", font=("Arial", 12, "bold")).pack(pady=3)
        
        self.camera2_var = tk.StringVar()
        self.camera2_combo = ttk.Combobox(cam2_frame, textvariable=self.camera2_var, 
                                         state="readonly", width=15, font=("Arial", 10))
        self.camera2_combo.pack(pady=3)
        
        self.switch2_button = tk.Button(cam2_frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å", 
                                       command=self.switch_camera2, 
                                       relief="raised", bg="#90EE90", 
                                       font=("Arial", 9), width=12)
        self.switch2_button.pack(pady=3)
        
        # –°—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã
        self.status2_label = tk.Label(cam2_frame, text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", 
                                     fg="red", font=("Arial", 8))
        self.status2_label.pack()
        
        # –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨ - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(main_control_frame, relief="groove", bd=2)
        control_frame.pack(side='left', padx=20, pady=5)
        
        tk.Label(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", font=("Arial", 12, "bold")).pack(pady=3)
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
        buttons_grid = tk.Frame(control_frame)
        buttons_grid.pack(pady=5)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        row1 = tk.Frame(buttons_grid)
        row1.pack(pady=2)
        
        self.start_button = tk.Button(row1, text="üé• –ó–∞–ø—É—Å–∫", 
                                     command=self.start_streaming, relief="raised", 
                                     bg="#87CEEB", font=("Arial", 9, "bold"),
                                     width=12, height=1)
        self.start_button.pack(side='left', padx=2)
        
        self.stop_button = tk.Button(row1, text="‚èπ –°—Ç–æ–ø", 
                                    command=self.stop_streaming, relief="raised", 
                                    bg="#FFB6C1", font=("Arial", 9, "bold"),
                                    width=12, height=1)
        self.stop_button.pack(side='left', padx=2)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ - –£–ë–ò–†–ê–ï–ú –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        row2 = tk.Frame(buttons_grid)
        row2.pack(pady=2)
        
        self.capture_button = tk.Button(row2, text="üì∏ –°–Ω–∏–º–æ–∫", 
                                       command=self.capture_and_save_images, relief="raised", 
                                       bg="#FFD700", font=("Arial", 9, "bold"),
                                       width=25, height=1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
        self.capture_button.pack()
         
         # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É save_button –ø–æ–ª–Ω–æ—Å—Ç—å—é
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–∫—Ä—ã—Ç—å
        row3 = tk.Frame(buttons_grid)
        row3.pack(pady=2)
        
        self.close_button = tk.Button(row3, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", 
                                     command=self.close_app, relief="raised", 
                                     bg="#FF6B6B", font=("Arial", 9, "bold"),
                                     width=25, height=1)
        self.close_button.pack()
        
        # –ü–∞–Ω–µ–ª—å –≤–∏–¥–µ–æ —Å –ù–û–†–ú–ê–õ–¨–ù–´–ú —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        video_frame = tk.Frame(self.window)
        video_frame.pack(pady=15)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        video1_container = tk.Frame(video_frame, relief="sunken", bd=3, width=660, height=660)
        video1_container.pack_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        video1_container.pack(side='left', padx=15)
        
        tk.Label(video1_container, text="–ö–∞–º–µ—Ä–∞ 1", font=("Arial", 12, "bold")).pack(pady=3)
        self.video1_label = tk.Label(video1_container, bg="black", fg="white", 
                                     text="–ö–∞–º–µ—Ä–∞ 1\n–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", font=("Arial", 12))
        self.video1_label.pack(expand=True)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        
        video2_container = tk.Frame(video_frame, relief="sunken", bd=3, width=660, height=660)
        video2_container.pack_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        video2_container.pack(side='left', padx=15)
        
        tk.Label(video2_container, text="–ö–∞–º–µ—Ä–∞ 2", font=("Arial", 12, "bold")).pack(pady=3)
        self.video2_label = tk.Label(video2_container, bg="black", fg="white", 
                                     text="–ö–∞–º–µ—Ä–∞ 2\n–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", font=("Arial", 12))
        self.video2_label.pack(expand=True)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        
        # –ü–∞–Ω–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_frame = tk.Frame(self.window)
        save_frame.pack(pady=10)
        
        tk.Label(save_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", font=("Arial", 11)).pack()
        self.directory_entry = tk.Entry(save_frame, width=80, font=("Arial", 10))
        self.directory_entry.insert(0, default_folder_to_save)
        self.directory_entry.pack(pady=5)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ - —É–±–∏—Ä–∞–µ–º save_button
        self.stop_button.config(state='disabled')
        self.capture_button.config(state='disabled')
        
    def setup_cameras(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
        available_cameras = find_available_cameras()
        
        camera_options = [f"–ö–∞–º–µ—Ä–∞ {i}" for i in available_cameras]
        if not camera_options:
            camera_options = ["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"]
        
        self.camera1_combo['values'] = camera_options
        self.camera2_combo['values'] = camera_options
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if len(available_cameras) >= 1:
            self.camera1_combo.set(f"–ö–∞–º–µ—Ä–∞ {available_cameras[0]}")
        if len(available_cameras) >= 2:
            self.camera2_combo.set(f"–ö–∞–º–µ—Ä–∞ {available_cameras[1]}")
        elif len(available_cameras) >= 1:
            self.camera2_combo.set(f"–ö–∞–º–µ—Ä–∞ {available_cameras[0]}")
            
    def switch_camera1(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã"""
        selected = self.camera1_var.get()
        if "–ö–∞–º–µ—Ä–∞" in selected:
            camera_index = int(selected.split()[-1])
            
            if self.cam1:
                self.cam1.release()
            
            self.cam1 = cv2.VideoCapture(camera_index)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            self.cam1.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
            self.cam1.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
            
            if self.cam1.isOpened():
                self.status1_label.config(text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∞", fg="green")
                print(f"–ö–∞–º–µ—Ä–∞ 1 –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: –∏–Ω–¥–µ–∫—Å {camera_index}")
            else:
                self.status1_label.config(text="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", fg="red")
                self.cam1 = None
                
    def switch_camera2(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã"""
        selected = self.camera2_var.get()
        if "–ö–∞–º–µ—Ä–∞" in selected:
            camera_index = int(selected.split()[-1])
            
            if self.cam2:
                self.cam2.release()
            
            self.cam2 = cv2.VideoCapture(camera_index)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            self.cam2.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
            self.cam2.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
            
            if self.cam2.isOpened():
                self.status2_label.config(text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∞", fg="green")
                print(f"–ö–∞–º–µ—Ä–∞ 2 –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: –∏–Ω–¥–µ–∫—Å {camera_index}")
            else:
                self.status2_label.config(text="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", fg="red")
                self.cam2 = None
                
    def process_frame(self, frame, size=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if frame is None:
            return None
            
        if size is None:
            size = self.video_size
            
        # –û—Ç—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
        frame = cv2.flip(frame, 1)
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        h, w = frame_rgb.shape[:2]
        aspect_ratio = w / h
        
        if aspect_ratio > 1:  # –®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            new_width = size
            new_height = int(size / aspect_ratio)
        else:  # –í—ã—Å–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            new_height = size
            new_width = int(size * aspect_ratio)
            
        resized_frame = cv2.resize(frame_rgb, (new_width, new_height), interpolation=cv2.INTER_LANCZOS4)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å —á–µ—Ä–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∞–º–∏
        final_image = Image.new('RGB', (size, size), (0, 0, 0))
        pil_frame = Image.fromarray(resized_frame)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        x = (size - new_width) // 2
        y = (size - new_height) // 2
        final_image.paste(pil_frame, (x, y))
        
        return final_image
        
    def update_frames(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ —Å –æ–±–µ–∏—Ö –∫–∞–º–µ—Ä (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–∞–º–µ—Ä—É
                if self.cam1 and self.cam1.isOpened():
                    ret1, frame1 = self.cam1.read()
                    if ret1 and frame1 is not None:
                        processed_frame1 = self.process_frame(frame1)
                        if processed_frame1:
                            photo1 = ImageTk.PhotoImage(processed_frame1)
                            self.window.after(0, lambda: self.update_video_label(self.video1_label, photo1))
                    else:
                        self.window.after(0, lambda: self.video1_label.config(text="–ö–∞–º–µ—Ä–∞ 1\n–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", image=""))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–∞–º–µ—Ä—É
                if self.cam2 and self.cam2.isOpened():
                    ret2, frame2 = self.cam2.read()
                    if ret2 and frame2 is not None:
                        processed_frame2 = self.process_frame(frame2)
                        if processed_frame2:
                            photo2 = ImageTk.PhotoImage(processed_frame2)
                            self.window.after(0, lambda: self.update_video_label(self.video2_label, photo2))
                    else:
                        self.window.after(0, lambda: self.video2_label.config(text="–ö–∞–º–µ—Ä–∞ 2\n–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", image=""))
                
                time.sleep(0.033)  # ~30 FPS
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ update_frames: {e}")
                time.sleep(0.1)
                
    def update_video_label(self, label, photo):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        try:
            label.photo = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            label.config(image=photo, text="")
        except:
            pass
            
    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏"""
        if not self.cam1 and not self.cam2:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞–º–µ—Ä—É!")
            return
            
        self.is_running = True
        self.update_thread = threading.Thread(target=self.update_frames, daemon=True)
        self.update_thread.start()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')
        self.capture_button.config(state='normal')
        
        print("–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        
    def stop_streaming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏"""
        self.is_running = False
        if self.update_thread:
            self.update_thread.join(timeout=1.0)
            
        # –û—á–∏—â–∞–µ–º –¥–∏—Å–ø–ª–µ–∏
        self.video1_label.config(text="–ö–∞–º–µ—Ä–∞ 1\n–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", image="")
        self.video2_label.config(text="–ö–∞–º–µ—Ä–∞ 2\n–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", image="")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')
        self.capture_button.config(state='disabled')
        
        print("–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    def capture_and_save_images(self):
        """–ó–∞—Ö–≤–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±–µ–∏—Ö –∫–∞–º–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        captured_any = False
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        self.capture_button.config(text="üì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º...", state='disabled')
        
        # –ó–∞—Ö–≤–∞—Ç —Å –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã
        if self.cam1 and self.cam1.isOpened():
            ret1, frame1 = self.cam1.read()
            if ret1 and frame1 is not None:
                self.captured_frame1 = cv2.flip(frame1, 1)
                captured_any = True
                print("–°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã 1 —Å–¥–µ–ª–∞–Ω")
            else:
                self.captured_frame1 = None
                
        # –ó–∞—Ö–≤–∞—Ç —Å–æ –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã
        if self.cam2 and self.cam2.isOpened():
            ret2, frame2 = self.cam2.read()
            if ret2 and frame2 is not None:
                self.captured_frame2 = cv2.flip(frame2, 1)
                captured_any = True
                print("–°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã 2 —Å–¥–µ–ª–∞–Ω")
            else:
                self.captured_frame2 = None
                
        if captured_any:
            # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            self.save_images_silent()
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.capture_button.config(text="üì∏ –°–Ω–∏–º–æ–∫", state='normal')
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–∫–∏ –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã")
             
    def save_images_silent(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        folder = self.directory_entry.get()
        if not os.path.exists(folder):
            self.capture_button.config(text="‚ùå –û—à–∏–±–∫–∞ –ø–∞–ø–∫–∏", bg="#FF6B6B")
            self.window.after(2000, lambda: self.capture_button.config(text="üì∏ –°–Ω–∏–º–æ–∫", bg="#FFD700", state='normal'))
            return
             
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        saved_files = []
         
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã
        if self.captured_frame1 is not None:
            filename1 = f"{timestamp}_camera1.jpg"
            filepath1 = os.path.join(folder, filename1)
            cv2.imwrite(filepath1, self.captured_frame1)
            saved_files.append(filename1)
             
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã
        if self.captured_frame2 is not None:
            filename2 = f"{timestamp}_camera2.jpg"
            filepath2 = os.path.join(folder, filename2)
            cv2.imwrite(filepath2, self.captured_frame2)
            saved_files.append(filename2)
             
        if saved_files:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            self.capture_button.config(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", bg="#98FB98")
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(saved_files)}")
             
            # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.window.after(2000, lambda: self.capture_button.config(text="üì∏ –°–Ω–∏–º–æ–∫", bg="#FFD700", state='normal'))
             
            # –°–±—Ä–æ—Å –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
            self.captured_frame1 = None
            self.captured_frame2 = None
            
    def close_app(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.stop_streaming()
        
        if self.cam1:
            self.cam1.release()
        if self.cam2:
            self.cam2.release()
            
        cv2.destroyAllWindows()
        self.window.destroy()
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.window.minsize(1400, 900)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
        self.window.mainloop()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = DualCameraApp()
    app.run()

    
   
        